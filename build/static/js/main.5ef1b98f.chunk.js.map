{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5ef1b98f.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport './InfoBox.css';\n\nconst InfoBox = ({ title, cases, total, active, isRed, ...props }) => {\n    console.log(title, active);\n    return (\n        <Card\n            onClick={props.onClick}\n            className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}\n        >\n            <CardContent>\n                <Typography className=\"infoBox__title\" color=\"textSecondary\" gutterBottom>\n                    {title}\n                </Typography>\n                <h2 className={`infoBox__cases ${!isRed && 'infoBox__cases--green'}`}>{cases}</h2>\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default InfoBox;\n\n// Title, i.e. Coronavirus cases\n// +120k Number of cases\n// 1.2M Total\n","import React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\n\nconst casesTypeColors = {\n    cases: {\n        hex: '#CC1034',\n        // rgb: 'rgb(204, 16, 52)',\n        // half_op: 'rgba(204, 16, 52, 0.5)',\n        multiplier: 800,\n    },\n    recovered: {\n        hex: '#7dd71d',\n        // rgb: 'rgb(125, 215, 29)',\n        // half_op: 'rgba(125, 215, 29, 0.5)',\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: '#fb4443',\n        // rgb: 'rgb(251, 68, 67)',\n        // half_op: 'rgba(251, 68, 67, 0.5)',\n        multiplier: 2000,\n    },\n};\n\n// export const sortData = (data) => {\n//     let sortedData = [...data];\n//     sortedData.sort((a, b) => {\n//         if (a.cases > b.cases) {\n//             return -1; // false\n//         } else {\n//             return 1; // true\n//         }\n//     });\n//     return sortedData;\n// };\nexport const sortData = (data) => {\n    let sortedData = [...data];\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\n// To change color of cases in Infoboxes\nexport const prettyPrintStat = (stat) => (stat ? `+${numeral(stat).format('0.0a')}` : '+0');\n\n// DRAW circles on the map with interactive tooltop\nexport const showDataOnMap = (data, casesType = 'cases') =>\n    data.map((country) => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\n        >\n            <Popup>\n                {/* <h1>I am a popup</h1> */}\n                <div className=\"info-container\">\n                    <div\n                        className=\"info-flag\"\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                    ></div>\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">\n                        Cases: {numeral(country.cases).format('0,0')}\n                    </div>\n                    <div className=\"info-recovered\">\n                        Recovered: {numeral(country.recovered).format('0,0')}\n                    </div>\n                    <div className=\"info-deaths\">\n                        Deaths: {numeral(country.deaths).format('0,0')}\n                    </div>\n                </div>\n            </Popup>\n        </Circle>\n    ));\n","import React from 'react';\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\nimport './Map.css';\nimport { showDataOnMap } from './util';\n\n// in App.js add import 'leaflet/dist/leaflet.css';\n\nconst Map = ({ countries, casesType, center, zoom }) => {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    );\n};\n\nexport default Map;\n\n// const Map = () => {\n// <LeafletMap>\n// Loop through countries and draw circles on the screen\n","import React from 'react';\nimport './Table.css';\nimport numeral from 'numeral';\n\nconst Table = ({ countries }) => {\n    return (\n        <div className=\"table\">\n            {countries.map(({ country, cases }) => (\n                <tr>\n                    <td>{country}</td>\n                    <td>\n                        <strong>{numeral(cases).format('0,0')}</strong>\n                    </td>\n                </tr>\n            ))}\n        </div>\n    );\n};\n\nexport default Table;\n\n// {countries.map(({ country }) => (\n// <td>{cases}</td>\n// <td>{country.country}</td>\n// <strong>{numeral(country.cases).format('0,0')}</strong>\n","import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from 'numeral';\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: 'index',\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format('+0,0');\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: 'time',\n                time: {\n                    format: 'MM/DD/YY',\n                    tooltipFormat: 'll',\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (value, index, values) {\n                        return numeral(value).format('0a');\n                    },\n                },\n            },\n        ],\n    },\n};\n\n// casesType - 'cases' / 'deaths' / 'recovered' / ...\n// const buildChartData = (data, casesType = 'cases') => {\n\n// data.cases.forEach((date) => {\n// data[casesType].forEach((date) => {\n// y: data['cases'][date] - lastDataPoint,\n// lastDataPoint = data['cases'][date];\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n\n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n};\n\n// Endpoint: https://disease.sh/v3/covid-19/historical/all?lastdays=120\n\n// const LineGraph = ({ casesType = 'cases', ...props }) => {\nconst LineGraph = ({ casesType = 'cases' }) => {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n                .then((response) => response.json())\n                .then((data) => {\n                    console.log('LineGraph - data >>>', data); // x - 6/8/20 (date), y - 7127703 (number of cases)\n                    // let chartData = buildChartData(data);\n                    let chartData = buildChartData(data, casesType);\n                    setData(chartData);\n                    // console.log(chartData);\n                    // // buildChart(chartData);\n                });\n        };\n\n        fetchData();\n    }, [casesType]);\n\n    return (\n        <div>\n            {data?.length > 0 && (\n                <Line\n                    data={{\n                        datasets: [\n                            {\n                                backgroundColor: 'rgba(204, 16, 52, 0.5)',\n                                borderColor: '#CC1034',\n                                data: data,\n                            },\n                        ],\n                    }}\n                    options={options}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default LineGraph;\n\n// <div className={props.className}>\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\nimport numeral from 'numeral';\n\n// STATE = How to write a variable in React\n// UseEffect = runrs a piece of code based on a given condition\n// const [countries, setCountries] = useState(['USA', 'India', 'Russia']);\n\nconst App = () => {\n    const [countries, setCountries] = useState([]);\n    const [country, setCountry] = useState('worldwide');\n    const [countryInfo, setCountryInfo] = useState({});\n    const [tableData, setTableData] = useState([]);\n\n    const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 }); // center of Pacific ocean\n    const [mapZoom, setMapZoom] = useState(3);\n    const [mapCountries, setMapCountries] = useState([]);\n\n    const [casesType, setCasesType] = useState('cases');\n\n    // to fix the issue with empty stats for worldwide dropdown option\n    useEffect(() => {\n        fetch('https://disease.sh/v3/covid-19/all')\n            .then((response) => response.json())\n            .then((data) => {\n                setCountryInfo(data);\n            });\n    }, []);\n\n    useEffect(() => {\n        // async -> send a request, wait for it, do something with\n        const getCountriesData = async () => {\n            fetch('https://disease.sh/v3/covid-19/countries')\n                .then((response) => response.json())\n                .then((data) => {\n                    const countries = data.map((country) => ({\n                        name: country.country, // United Kingdom, United States, France\n                        value: country.countryInfo.iso2, // UK, USA, FR\n                    }));\n\n                    let sortedData = sortData(data);\n                    setCountries(countries);\n                    // setTableData(data);\n                    setTableData(sortedData);\n                    setMapCountries(data);\n                });\n        };\n\n        getCountriesData();\n    }, []);\n\n    // console.log(casesType);\n\n    const onCountryChange = async (e) => {\n        const countryCode = e.target.value;\n        console.log('countryCode >>>', countryCode);\n        const url =\n            countryCode === 'worldwide'\n                ? 'https://disease.sh/v3/covid-19/all'\n                : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n        await fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                setCountry(countryCode);\n                // All of the data from the country response\n                setCountryInfo(data);\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                setMapZoom(4);\n            });\n    };\n    console.log('countryInfo >>>', countryInfo); // initially it's empty but after you choose a specific country in the dropdown - it's changed\n\n    // API endpoint: https://disease.sh/v3/covid-19/countries\n\n    return (\n        <div className=\"app\">\n            <div className=\"app__left\">\n                <div className=\"app__header\">\n                    <h1>COVID-19 Tracker</h1>\n                    <FormControl className=\"app__dropdown\">\n                        <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n                            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                            {countries.map((country) => (\n                                <MenuItem value={country.value}>{country.name}</MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </div>\n                <div className=\"app__stats\">\n                    <InfoBox\n                        title=\"Coronavirus Cases\"\n                        onClick={(e) => setCasesType('cases')}\n                        isRed\n                        active={casesType === 'cases'}\n                        cases={prettyPrintStat(countryInfo.todayCases)}\n                        total={numeral(countryInfo.cases).format('0.0a')}\n                    />\n                    <InfoBox\n                        title=\"Recovered\"\n                        onClick={(e) => setCasesType('recovered')}\n                        active={casesType === 'recovered'}\n                        cases={prettyPrintStat(countryInfo.todayRecovered)}\n                        total={numeral(countryInfo.recovered).format('0.0a')}\n                    />\n                    <InfoBox\n                        title=\"Deaths\"\n                        onClick={(e) => setCasesType('deaths')}\n                        isRed\n                        active={casesType === 'deaths'}\n                        cases={prettyPrintStat(countryInfo.todayDeaths)}\n                        total={numeral(countryInfo.deaths).format('0.0a')}\n                    />\n                </div>\n                <Map\n                    countries={mapCountries}\n                    casesType={casesType}\n                    center={mapCenter}\n                    zoom={mapZoom}\n                />\n            </div>\n\n            <Card className=\"app__right\">\n                <CardContent>\n                    <div className=\"app__information\">\n                        <h3>Live Cases by Country</h3>\n                        <Table countries={tableData} />\n                        <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n                        <LineGraph casesType={casesType} />\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    );\n};\n\nexport default App;\n\n// <Select variant=\"outlined\" value=\"abc\">\n// Loop through all the coutries and show a drop down list of the options -> to do so: use state\n// <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n// <MenuItem value=\"worldwide\">Option 1</MenuItem>\n// <MenuItem value=\"worldwide\">Option 2</MenuItem>\n// <MenuItem value=\"worldwide\">Option 3</MenuItem>\n\n// <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n//    {countries.map((country) => (\n//        <MenuItem value={country.value}>{country.name}</MenuItem>\n//    ))}\n// </Select>\n\n// <MenuItem value={country}>{country}</MenuItem>\n\n// cases={1234}\n// total={2000}\n// cases={countryInfo.todayCases}\n// total={countryInfo.cases}\n\n// <div className=\"app__right\"></div>\n// <h3>Worldwide new cases</h3>\n// <LineGraph />\n// <LineGraph className=\"app__graph\" casesType={casesType} />\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}